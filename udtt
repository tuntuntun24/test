#dãy fibo
def fibo1(n):
    if n < 3:
        return 1
    else:
        return fibo1(n-1) + fibo1(n-2)
print(fibo1(6))

# tháp hà nội
def chuyen1(n, a, b, c):
    if n == 1:
        print(f"Di chuyển đĩa 1 từ {a} sang {b}")
    else:
        chuyen1(n-1, a, c, b)
        chuyen1(1, a, b, c)
        chuyen1(n-1, c, b, a)
chuyen1(3, 'A', 'B', 'C')

def c1(k, n):
    if k == 0 or k == n:
        return 1
    else:
        return c1(k, n-1) + c1(k-1, n-1)

# tố hợp chập k của n
def tao(n, k):
    return [[-1] * (n + 1) for _ in range(k + 1)]

def C2(k, n, a):
    if k == 0 or k == n:
        a[k][n] = 1
    elif a[k][n] < 0:
        a[k][n] = C2(k, n-1, a) + C2(k-1, n-1, a)
    return a[k][n]
k, n = 5, 6
a = tao(n, k)
kq = C2(k, n, a)
print(f"C({k}, {n}) = {kq}")
=================================================================
# quay lui liệt kê hoán vị
def Try(k, n, x, dd):
    for i in range(1, n+1):
        if dd[i] == False:
            x[k-1] = i
            if k == n:
                print(" ".join(map(str, x)))
            else:
                dd[i] = True
                Try(k + 1, n, x, dd)
                dd[i] = False

def generate_permutations(n):
    x = [0] * n
    dd = [False] * (n + 1)
    Try(1, n, x, dd)
generate_permutations(3)

# quay lui liệt kê nhị phân
def show(x):
    print(" ".join(map(str, x)))

def Try(k, n, x):
    for i in range(2):
        x[k - 1] = i
        if k == n:
            show(x)
        else:
            Try(k + 1, n, x)

def generate_binary_sequences(n):
    x = [0] * n
    Try(1, n, x)
generate_binary_sequences(3)
========================================================
# tham lam bình nươc
def nuoc():
    n = int(input("Nhập số lít nước: "))
    m = [2, 3, 4, 5, 8]
    m.sort()
    temp = 0
    for i in range(len(m)):
        if n >= m[i]:
            n = n - m[i]
            temp += 1
        else:
            break
    return temp
a = nuoc()
print("Số chai nước đầy:", a)

# tham lam lập lịch
def ll():
    s = [8, 9, 10, 11, 12]
    f = [8.5, 11, 11.5, 12.5, 13]
    schedule = []
    temp = 0
    for i in range(len(s)):
        if s[i] >= temp:
            schedule.append(i)
            temp = f[i]
    return schedule
a = ll()
print(a)
=============================================================
# chia để trị tìm kiếm nhị phân
def binary_search(a, left, right, k):
    if left > right:
        return -1
    mid = (left + right) // 2
    if a[mid] == k:
        return mid
    elif a[mid] > k:
        return binary_search(a, left, mid - 1, k)
    else:
        return binary_search(a, mid + 1, right, k)
a = [1, 3, 5, 7, 9, 11, 13, 15]
k = 7
kq = binary_search(a, 0, len(a) - 1, k)
if kq != -1:
    print(f"Số {k} được tìm thấy tại vị trí {kq}.")
else:
    print(f"Số {k} không có trong danh sách.")
