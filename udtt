#dãy fibo
def fibo1(n):
    if n < 3:
        return 1
    else:
        return fibo1(n-1) + fibo1(n-2)
print(fibo1(6))

# tháp hà nội
def chuyen1(n, a, b, c):
    if n == 1:
        print(f"Di chuyển đĩa 1 từ {a} sang {b}")
    else:
        chuyen1(n-1, a, c, b)
        chuyen1(1, a, b, c)
        chuyen1(n-1, c, b, a)
chuyen1(3, 'A', 'B', 'C')

def c1(k, n):
    if k == 0 or k == n:
        return 1
    else:
        return c1(k, n-1) + c1(k-1, n-1)

# tố hợp chập k của n
def tao(n, k):
    return [[-1] * (n + 1) for _ in range(k + 1)]

def C2(k, n, a):
    if k == 0 or k == n:
        a[k][n] = 1
    elif a[k][n] < 0:
        a[k][n] = C2(k, n-1, a) + C2(k-1, n-1, a)
    return a[k][n]
k, n = 5, 6
a = tao(n, k)
kq = C2(k, n, a)
print(f"C({k}, {n}) = {kq}")
=================================================================
# quay lui liệt kê hoán vị
def Try(k, n, x, dd):
    for i in range(1, n+1):
        if dd[i] == False:
            x[k-1] = i
            if k == n:
                print(" ".join(map(str, x)))
            else:
                dd[i] = True
                Try(k + 1, n, x, dd)
                dd[i] = False

def generate_permutations(n):
    x = [0] * n
    dd = [False] * (n + 1)
    Try(1, n, x, dd)
generate_permutations(3)

# quay lui liệt kê nhị phân
def show(x):
    print(" ".join(map(str, x)))

def Try(k, n, x):
    for i in range(2):
        x[k - 1] = i
        if k == n:
            show(x)
        else:
            Try(k + 1, n, x)

def generate_binary_sequences(n):
    x = [0] * n
    Try(1, n, x)
generate_binary_sequences(3)
========================================================
# tham lam bình nươc
def nuoc():
    n = int(input("Nhập số lít nước: "))
    m = [2, 3, 4, 5, 8]
    m.sort()
    temp = 0
    for i in range(len(m)):
        if n >= m[i]:
            n = n - m[i]
            temp += 1
        else:
            break
    return temp
a = nuoc()
print("Số chai nước đầy:", a)

# tham lam lập lịch
def ll():
    s = [8, 9, 10, 11, 12]
    f = [8.5, 11, 11.5, 12.5, 13]
    schedule = []
    temp = 0
    for i in range(len(s)):
        if s[i] >= temp:
            schedule.append(i)
            temp = f[i]
    return schedule
a = ll()
print(a)
=============================================================
# chia để trị tìm kiếm nhị phân
def binary_search(a, left, right, k):
    if left > right:
        return -1
    mid = (left + right) // 2
    if a[mid] == k:
        return mid
    elif a[mid] > k:
        return binary_search(a, left, mid - 1, k)
    else:
        return binary_search(a, mid + 1, right, k)
a = [1, 3, 5, 7, 9, 11, 13, 15]
k = 7
kq = binary_search(a, 0, len(a) - 1, k)
if kq != -1:
    print(f"Số {k} được tìm thấy tại vị trí {kq}.")
else:
    print(f"Số {k} không có trong danh sách.")

# chia để trị tìm max
def timmax(mang):
    n = len(mang)
    if n == 1:
        return mang[0]
    mid = n // 2
    left_half = mang[:mid]
    right_half = mang[mid:]
    max_left = timmax(left_half)
    max_right = timmax(right_half)
    return max(max_left, max_right)

mang = [1, 3, 4, 9, 6, 7, 5, 4]
sln = timmax(mang)
print(f"Danh sách là: {mang}")
print(f"Phần tử lớn nhất là: {sln}")

# chia để trị a mũ n
def a_mu_n(a, n):
    if n == 1:
        return a
    chia = a_mu_n(a, n // 2)
    if n % 2 == 0:
        return chia * chia
    else:  # n là số lẻ
        return chia * chia * a

print(f"2^10 = {a_mu_n(2, 10)}")
==========================================================
# quy hoạch động phân tích số thành tổng
def phantich(n):
    f = [[0] * (n+1) for _ in range(n+1)]
    for i in range(n+1):
        f[i][0] = 1
    for i in range(1, n+1): #m
        for j in range(1, n + 1): #n
            if i > j:
                f[i][j] = f[i-1][j]
            else:
                f[i][j] = f[i-1][j] + f[i][j-i]
    return f[n][n]
n = 5
print(phantich(n))

# quy hoạch động bài toán cái túi
def caitui(m):
    n = 4
    w = [1, 4, 4, 5]
    v = [1, 4, 5, 7]
    f = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(1, n + 1):
        for j in range(m + 1):
            f[i][j] = f[i - 1][j]
            if w[i - 1] <= j:
                temp = v[i - 1] + f[i - 1][j - w[i - 1]]
                if f[i][j] < temp:
                    f[i][j] = temp
    return f, n, w, v
def truyvet(f, n, m, w, v):
    i = n
    j = m
    print("Các gói được chọn:")
    while i != 0:
        if f[i][j] != f[i - 1][j]:
            print(f"Gói thứ {i} (trọng lượng: {w[i - 1]}, giá trị: {v[i-1]})")
            j -= w[i - 1]
        i -= 1
m = 7
f, n, w, v = caitui(m)
print("Giá trị lớn nhất:", f[n][m])
truyvet(f, n, m, w, v)

# quy hoạch động dãy con tăng dài nhất
import sys
def daycon(a):
    n = len(a)
    a = [(-sys.maxsize - 1)] + a + [sys.maxsize]
    L = [0] * (n + 2)
    T = [0] * (n + 2)
    L[n + 1] = 1
    for i in range(n, -1, -1):
        jmax = n + 1
        for j in range(i+1, n+2):
            if a[j] > a[i] and L[j] > L[jmax]:
                jmax = j
        L[i] = L[jmax] + 1
        T[i] = jmax
    return a, L, T, n
def result(a, T, n):
    k = T[0]
    print("Dãy con lớn nhất: ")
    while k != n+1:
        print(f"a[{k}] = {a[k]}")
        k = T[k]
a = [1, 8, 3, 4, 9, 10, 5, 11, 7]
print(f"Dãy số ban đầu: {a}")
a, L, T, n = daycon(a)
result(a, T, n)
===========================================================
# xử lý xâu bmh
def char_in_string_custom(char_to_find, pattern_string):
    for idx in range(len(pattern_string) - 1, -1, -1):
        if pattern_string[idx] == char_to_find:
            return idx
    return -1
def bmh(t, p):
    dem = 0
    v = len(p)
    i = v-1
    while i < len(t):
        x = v-1
        current_i = i
        while t[current_i] == p[x] and x > -1:
            current_i -= 1
            x -= 1
        if x < 0:
            print("P có trong T")
            dem += 1
            i = i + v
        else:
            char_to_check = t[i]
            k = char_in_string_custom(char_to_check, p)
            if k < 0:
                i = i + v
            else:
                i = i + v - k - 1
    return dem
t = 'minhthanh24'
p = 'htha'
ktra = bmh(t, p)

# xử lý xâu thuật toán z
def z_algo(s):
    n = len(s)
    z = [0] * n
    left = 0
    right = 0
    for i in range(1, n):
        if i > right:
            left = i
            right = i
            while right < n and s[right - left] == s[right]:
                right += 1
            z[i] = right - left
            right -= 1
        else:
            k = i - left
            if z[k] < right - i + 1:
                z[i] = z[k]
            else:
                left = i
                while right < n and s[right - left] == s[right]:
                    right += 1
                z[i] = right - left
                right -= 1
    return z
def inkq(t, p):
    m = len(p)
    n = len(t)
    s = p + '$' + t
    z_array = z_algo(s)
    kq = []
    for i in range(m + 1, len(s)):
        if z_array[i] == m:
            kq.append(i - (m + 1))
    return kq

t = "Ban Viet o Viet Nam"
p = "Viet"
kq = inkq(t, p)
print(f"T: '{t}'")
print(f"P: '{p}'")
print(f"P có trong T ở các vị trí: {kq}\n")
===================================================
n = 12
A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10.0, 11, 12.5]
k = 2.0
mang_luu_tru = []
def F1(A, k, i):
    if i < 0:
        return 0, 0.0
    if A[i] % k == 0:
        mang_luu_tru.append(A[i])
    return F1(A, k, i-1)
F1(A, k, n-1)
mang_luu_tru.sort()
if len(mang_luu_tru) > 0:
    print("Các số trong mảng A chia hết cho k:", mang_luu_tru)
    print("Số lượng các số trong mảng A chia hết cho k:", len(mang_luu_tru))
    print("Tổng các số chia hết cho 2 trong mảng A:", sum(mang_luu_tru))
else:
    print("Không có số nào trong mảng A chia hết cho k")
print("="* 70)
n = 12
A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10.0, 11, 12.5]
k = 8.5
def F(A, k, trai, phai):
    if trai > phai:
        return [], 0
    if trai == phai:
        if A[trai] > k:
            return [A[trai]], 1
        else:
            return [], 0
    mid = (trai + phai) // 2
    mang_trai, dem_trai = F(A, k, trai, mid)
    mang_phai, dem_phai = F(A, k, mid + 1, phai)
    return mang_trai + mang_phai, dem_trai + dem_phai

print(f"Mảng A: {A}")
print(f"Số k: {k}")
tim, dem = F(A, k, 0, len(A) - 1)
if len(tim) > 0:
    print(f"Tổng của các số lớn hơn {k} là: {sum(tim)}")
else:
    print(f"\nKhông có số nào lớn hơn {k} trong mảng A.")
